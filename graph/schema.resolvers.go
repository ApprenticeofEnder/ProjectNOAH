package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.60

import (
	"context"

	"github.com/ApprenticeofEnder/ProjectNOAH/graph/model"
)

// CreateCampaign is the resolver for the createCampaign field.
func (r *mutationResolver) CreateCampaign(ctx context.Context, input model.NewCampaign) (*model.Campaign, error) {
	var campaign model.Campaign
	var user model.User
	campaign.Title = input.Title
	campaign.Description = input.Description
	user.Email = "test@test.com"
	campaign.User = &user
	return &campaign, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	var user model.User
	user.Email = input.Email
	user.MarketingConsent = input.MarketingConsent
	user.SupabaseID = input.SupabaseID
	return &user, nil
}

// Campaigns is the resolver for the campaigns field.
func (r *queryResolver) Campaigns(ctx context.Context) ([]*model.Campaign, error) {
	var campaigns []*model.Campaign
	dummyCampaign := model.Campaign{
		Title:       "Operation Shattered Vision",
		Description: "SSMR but More AC6 Vibes",
		User:        &model.User{SupabaseID: "DUMMY-ID", Email: "test@test.com", MarketingConsent: true},
	}
	campaigns = append(campaigns, &dummyCampaign)
	return campaigns, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
